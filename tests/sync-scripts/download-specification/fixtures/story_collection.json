[
  {
    "id": "MCA-539",
    "parent_id": "MCA-201",
    "title": "Create COMPANY Node",
    "user_story": "As an API contributor\nI want to be able to create COMPANY nodes\nSo I can fill gaps in the database\n",
    "description": "* A COMPANY node is successfully created when requested with valid data. The required data structure is specified in parent (epic) ticket MCA-201. -> Status Code \\`201\\`\n* A successful request returns the created node with all specified properties.\n* Properties are returned, even when they are empty (optional fields). They are returned with value \\`null\\`.\n* Unknown properties are ignored. They are not processed. They do not produce any info, warning or error messages for the user. -> Status Code \\`201\\`\n* Read-only properties (\\`id\\`, \\`created\\_at\\`, \\`updated\\_at\\`) are ignored. They are not processed. They do not produce any info, warning or error messages for the user. -> Status Code \\`201\\`\n* Requests with invalid data are rejected. Cases for invalid data include: missing mandatory fields, syntax errors, wrong data types or wrong data structure. -> Status Code \\`400\\`\n",
    "api_verb": "POST",
    "api_path": "/company",
    "response_options": [
      "201",
      "400"
    ],
    "created_at": "2025-09-11T10:17:26.225+0200",
    "updated_at": "2025-09-12T19:28:26.423+0200"
  },
  {
    "id": "MCA-392",
    "parent_id": "MCA-70",
    "title": "Has CAR MODEL-belongs-to-BRAND Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-22T17:14:16.237+0200",
    "updated_at": "2025-08-22T17:14:16.869+0200"
  },
  {
    "id": "MCA-391",
    "parent_id": "MCA-70",
    "title": "Has CAR MODEL-is-predecessor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-22T17:13:53.775+0200",
    "updated_at": "2025-08-22T17:13:54.494+0200"
  },
  {
    "id": "MCA-390",
    "parent_id": "MCA-70",
    "title": "Has CAR MODEL-has-successor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-22T17:12:14.487+0200",
    "updated_at": "2025-08-22T17:13:33.021+0200"
  },
  {
    "id": "MCA-389",
    "parent_id": "MCA-70",
    "title": "Get CAR MODEL-has-IMAGE Relationship",
    "user_story": "As an API contributor\\\nI want to be able to request the relationship between a CAR MODEL and an IMAGE\\\nSo I can find out if they are already connected or not\n",
    "description": "* the requested relationship is returned when it actually exists → status code `200`\n  * requirements: the car model, the image and the relationship between both nodes exist\n  * response: a JSON containing the following relationship data:\n    * `car_model_id`: integer\n    * `image_id`: integer\n    * `relationship_id`: integer\n    * `relationship_name`: string\n    * `created_at`: string\n    * `updated_at`: string\n* the relationship retrieval fails with status code `404` when the provided data was not valid:\n  * a `car model` with the given ID was not found\n    * node with given ID exists, but is not a `car model`\n  * an `image` with the given ID was not found\n    * node with given ID exists, but is not an `image`\n  * the relationship between both nodes was not found\n\n### **NOT in scope for this iteration**\n\n* proper JSON structure according to the JSON:API\n* returning the actual nodes (for now only the IDs)\n",
    "api_verb": "GET",
    "api_path": "/car-models/<car-model-id>/has-image",
    "response_options": [
      "200",
      "404"
    ],
    "created_at": "2025-08-22T16:01:57.346+0200",
    "updated_at": "2025-09-02T08:41:50.173+0200"
  },
  {
    "id": "MCA-388",
    "parent_id": "MCA-70",
    "title": "Has CAR MODEL-has-prime-image-IMAGE Relationship",
    "user_story": "As an API contributor\\\nI want to find out if a specific IMAGE is already attached as prime image to a specific CAR MODEL\\\nSo I can find gaps in the database\n",
    "description": "# Specification\n\n* Requests are rejected with a `404` error when the CAR MODEL, the IMAGE or both don't exist.\n* Requests are rejected with a `404` error when a node with the given ID actually exists, but does not have the correct type. The first node needs to be a CAR MODEL, the second an IMAGE.\n* Requests are rejected with a `404` error when no `has-prime-image` relationship exists between both nodes.\n* The relationship is successfully returned when it actually exists. → Status code `200`.\n  * A JSON object with the relationship information is returned:\n    * `car_model_id`: integer\n    * `image_id`: integer\n    * `relationship_id`: integer\n    * `relationship_name`: string → `has-prime-image`\n",
    "api_verb": "GET",
    "api_path": "/car-models/<car-model-id>/has-prime-image/<image-id>",
    "response_options": [
      "200",
      "404"
    ],
    "created_at": "2025-08-22T15:58:42.288+0200",
    "updated_at": "2025-09-06T16:04:06.732+0200"
  },
  {
    "id": "MCA-381",
    "parent_id": "MCA-368",
    "title": "Filter named node collection",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-22T09:32:38.188+0200",
    "updated_at": "2025-08-22T09:32:38.491+0200"
  },
  {
    "id": "MCA-380",
    "parent_id": "MCA-368",
    "title": "Filter node collection",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-22T09:32:27.846+0200",
    "updated_at": "2025-08-22T09:32:27.985+0200"
  },
  {
    "id": "MCA-379",
    "parent_id": "MCA-72",
    "title": "Get all IMAGE-is-prime-image-of-NODE Relationships",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-21T14:15:25.759+0200",
    "updated_at": "2025-08-21T14:15:26.364+0200"
  },
  {
    "id": "MCA-378",
    "parent_id": "MCA-72",
    "title": "Restore IMAGE Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-21T14:08:27.695+0200",
    "updated_at": "2025-08-21T14:08:28.361+0200"
  },
  {
    "id": "MCA-377",
    "parent_id": "MCA-72",
    "title": "Soft Delete IMAGE Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-21T14:08:23.051+0200",
    "updated_at": "2025-08-21T14:08:23.738+0200"
  },
  {
    "id": "MCA-376",
    "parent_id": "MCA-71",
    "title": "Restore BRAND Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-21T13:51:08.515+0200",
    "updated_at": "2025-08-21T13:51:09.112+0200"
  },
  {
    "id": "MCA-375",
    "parent_id": "MCA-71",
    "title": "Soft Delete BRAND Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-21T13:50:46.868+0200",
    "updated_at": "2025-08-21T13:50:47.545+0200"
  },
  {
    "id": "MCA-374",
    "parent_id": "MCA-368",
    "title": "Sort named node collection",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-18T15:23:20.531+0200",
    "updated_at": "2025-08-22T09:28:28.521+0200"
  },
  {
    "id": "MCA-373",
    "parent_id": "MCA-368",
    "title": "Sort node collection",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-18T15:23:12.308+0200",
    "updated_at": "2025-08-22T09:27:41.702+0200"
  },
  {
    "id": "MCA-371",
    "parent_id": "MCA-368",
    "title": "Paginate named node collection",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-18T15:21:56.467+0200",
    "updated_at": "2025-08-22T09:28:21.006+0200"
  },
  {
    "id": "MCA-369",
    "parent_id": "MCA-368",
    "title": "Paginate node collection",
    "user_story": "As an API consumer\\\nWhen requesting a list of NODEs (e.g. Images)\\\nI want to fetch them in slices (instead of the whole collection at once)\\\nSo I don't have to wait for and parse a giant response object\n",
    "description": "The user should be able to restrict the amount of nodes that are returned in a collection. This is for performance reasons (loading thousands of nodes takes some time) and to make it easier for the user to work on the response objects. When requesting a collection the user should be provided with enough meta information to create an informed request (e.g. how many pages are there in total and how big are they).\n\n# Specification\n\n* The parameter `page` can be attached to every “get all nodes of node type” request, e.g. `GET /brands?page=3`.\n* Each full page returns `100` items of the original collection (page size is fixed).\n  * The last page returns the remaining items (between `0` and `100`).\n* Each page contains a different subset of the original collection.\n* When a valid page number was provided then the response returns with code `200`.\n  * Even when the collection is empty (which should only happen in edge cases).\n  * Page `1` is always a valid page number, no matter how large the collection is.\n* Page `0` and negative page numbers lead to a `422` error.\n* Any value that is not a number (e.g. `page=three`) leads to a `422` error.\n* When a page is requested that is out-of-range then a `404` error is returned (e.g. page 10 is requested, but there are only 8).\n* The response returns additional meta data:\n  * current page\n  * page size\n  * pages in total\n  * items in total\n* The meta data is always returned, even when no pagination was requested.\n* The data structure of the returned items in the collection stays untouched.\n\n# Scope & Limits\n\n* The page size is static for now. Making it configurable comes later.\n* The collections are not explicitly sorted. The database decides the order. This might lead to duplicates across multiple pages. This will be tackled in a different ticket.\n* What happens when providing the page parameter multiple times? Depends on how Express.js handles this case. TBD.\n* Collisions between meta information and collection data is possible, e.g. field “pages” in node type “Book”. Will be tackled in a separate ticket.\n",
    "api_verb": "GET",
    "api_path": "?page=<page>",
    "response_options": [
      "200",
      "404",
      "422"
    ],
    "created_at": "2025-08-18T15:19:55.867+0200",
    "updated_at": "2025-08-31T19:50:48.830+0200"
  },
  {
    "id": "MCA-367",
    "parent_id": "MCA-70",
    "title": "Get CAR MODEL-is-predecessor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T16:42:12.429+0200",
    "updated_at": "2025-08-17T16:42:13.109+0200"
  },
  {
    "id": "MCA-366",
    "parent_id": "MCA-70",
    "title": "Get CAR MODEL-has-successor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T16:41:52.929+0200",
    "updated_at": "2025-08-22T17:12:15.449+0200"
  },
  {
    "id": "MCA-365",
    "parent_id": "MCA-70",
    "title": "Delete CAR MODEL-is-predecessor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T16:39:46.943+0200",
    "updated_at": "2025-08-17T16:39:47.567+0200"
  },
  {
    "id": "MCA-364",
    "parent_id": "MCA-70",
    "title": "Delete CAR MODEL-has-successor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T16:39:29.327+0200",
    "updated_at": "2025-08-17T16:39:29.951+0200"
  },
  {
    "id": "MCA-357",
    "parent_id": "MCA-70",
    "title": "Restore CAR MODEL Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T13:05:37.400+0200",
    "updated_at": "2025-08-17T13:09:08.927+0200"
  },
  {
    "id": "MCA-356",
    "parent_id": "MCA-70",
    "title": "Soft Delete CAR MODEL Node",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-08-17T13:05:11.625+0200",
    "updated_at": "2025-08-17T13:09:01.874+0200"
  },
  {
    "id": "MCA-298",
    "parent_id": "MCA-70",
    "title": "Create CAR MODEL-is-predecessor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-07-24T16:20:28.392+0200",
    "updated_at": "2025-08-17T16:38:56.907+0200"
  },
  {
    "id": "MCA-297",
    "parent_id": "MCA-70",
    "title": "Create CAR MODEL-has-successor Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-07-24T16:20:06.789+0200",
    "updated_at": "2025-08-17T16:38:41.419+0200"
  },
  {
    "id": "MCA-296",
    "parent_id": "MCA-72",
    "title": "Delete IMAGE-is-prime-image-of-NODE Relationship",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-07-24T16:14:09.671+0200",
    "updated_at": "2025-08-21T14:15:38.665+0200"
  },
  {
    "id": "MCA-295",
    "parent_id": "MCA-72",
    "title": "Get IMAGE-is-prime-image-of-NODE Relationship by ID",
    "user_story": "As a \\<ROLE>\\\nI want to be able to \\<ACTION>\\\nSo I can \\<REASON>\n",
    "description": "",
    "api_verb": null,
    "api_path": null,
    "response_options": [],
    "created_at": "2025-07-24T16:13:58.383+0200",
    "updated_at": "2025-08-21T14:15:11.443+0200"
  },
  {
    "id": "MCA-294",
    "parent_id": "MCA-70",
    "title": "Get CAR MODEL-has-prime-image Relationship",
    "user_story": "As an API consumer\\\nI want to be able to request the prime IMAGE for a CAR MODEL\\\nSo I can represent the node in the best possible form in the frontend\\\n(Because I don't know which one from the image gallery is the best one)\n",
    "description": "# Specification\n\n* Requests are rejected with a `404` error when the CAR MODEL doesn't exist.\n* Requests are rejected with a `404` error when a node with the given ID actually exists, but is not a CAR MODEL.\n* The relationship is successfully returned when one actually exists. → Status code `200`.\n  * A JSON object with the relationship information is returned:\n    * `car_model_id`: integer\n    * `image_id`: integer\n    * `relationship_id`: integer\n    * `relationship_name`: string → `has-prime-image`\n* When there exists no `has-prime-image` relationship for the CAR MODEL then an empty response is returned. → Status code `200`.\n",
    "api_verb": "GET",
    "api_path": "/car-models/<car-model-id>/has-prime-image",
    "response_options": [
      "200",
      "404"
    ],
    "created_at": "2025-07-24T15:49:14.407+0200",
    "updated_at": "2025-09-06T16:04:04.552+0200"
  },
  {
    "id": "MCA-293",
    "parent_id": "MCA-70",
    "title": "Delete CAR MODEL-has-prime-image-IMAGE Relationship",
    "user_story": "As an API contributor\\\nI want to be able to detach the prime IMAGE from a CAR MODEL\\\nSo I can clean up bad data or test data\n",
    "description": "# Expected Behavior\n\n* Requests are rejected with a `404` error when the CAR MODEL, the IMAGE or both don't exist.\n* Requests are rejected with a `404` error when a node with the given ID actually exists, but does not have the correct type. The first node needs to be a CAR MODEL, the second an IMAGE.\n* Requests are rejected with a `404` error when no `has-prime-image` relationship exists between both nodes.\n* The relationship is successfully deleted when it actually exists. → Status code `204`.\n\n# Scope & Limits\n\n* No authorization at the moment. Everyone can delete the relationship.\n",
    "api_verb": "DELETE",
    "api_path": "/car-models/<car-model-id>/has-prime-image/<image-id>",
    "response_options": [
      "204",
      "404"
    ],
    "created_at": "2025-07-24T15:48:49.366+0200",
    "updated_at": "2025-09-06T15:30:07.624+0200"
  }
]