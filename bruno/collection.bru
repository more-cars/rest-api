script:pre-request {
  const axios = require("axios")

  //////////////////////////////////////////
  // BRANDS
  //////////////////////////////////////////
  async function ensureValidBrandExists() {
   if (!bru.getEnvVar('validBrandId')) {
      const nodeList = await getAllBrands()
      if (nodeList.length > 0) {
        bru.setEnvVar("validBrandId", nodeList[0].id)
      } else {
        const newNode = await createBrand()
        bru.setEnvVar("validBrandId", newNode.id)
      }
    }
  }

  async function createBrand() {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/brands", {
      name: 'Dummy'
    })
    return response.data
  }

  async function getAllBrands() {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/brands")
    return response.data
  }

  async function getBrandById(id) {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/brands/" + id)
    return response.data
  }

  async function ensureBrandHasCarModelRelationshipExists() {
    await ensureValidBrandExists()
    await ensureValidCarModelExists()
    await createBrandHasCarModelRelationship(bru.getEnvVar('validBrandId'), bru.getEnvVar('validCarModelId'))
  }

  async function createBrandHasCarModelRelationship(brandId, carModelId) {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/brands/" + brandId + "/has-car-model/" + carModelId)
    return response.data
  }

  async function ensureBrandHasImageRelationshipExists() {
    await ensureValidBrandExists()
    await ensureValidImageExists()
    await createBrandHasImageRelationship(bru.getEnvVar('validBrandId'), bru.getEnvVar('validImageId'))
  }

  async function createBrandHasImageRelationship(brandId, imageId) {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/brands/" + brandId + "/has-image/" + imageId)
    return response.data
  }

  //////////////////////////////////////////
  // CAR MODELS
  //////////////////////////////////////////
  async function ensureValidCarModelExists() {
    if (!bru.getEnvVar('validCarModelId')) {
      const nodeList = await getAllCarModels()
      if (nodeList.length > 0) {
        bru.setEnvVar("validCarModelId", nodeList[0].id)
      } else {
        const newNode = await createCarModel()
        bru.setEnvVar("validCarModelId", newNode.id)
      }
    }
  }

  async function createCarModel() {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/car-models", {
      name: 'Dummy'
    })
    return response.data
  }

  async function getAllCarModels() {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/car-models")
    return response.data
  }

  async function getCarModelById(id) {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/car-models/" + id)
    return response.data
  }

  async function ensureCarModelBelongsToBrandRelationshipExists() {
    await ensureValidCarModelExists()
    await ensureValidBrandExists()
    await createCarModelBelongsToBrandRelationship(bru.getEnvVar('validCarModelId'), bru.getEnvVar('validBrandId'))
  }

  async function createCarModelBelongsToBrandRelationship(carModelId, brandId) {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/car-models/" + carModelId + "/belongs-to-brand/" + brandId)
    return response.data
  }

  async function ensureCarModelHasImageRelationshipExists() {
    await ensureValidCarModelExists()
    await ensureValidImageExists()
    await createCarModelHasImageRelationship(bru.getEnvVar('validCarModelId'), bru.getEnvVar('validImageId'))
  }

  async function createCarModelHasImageRelationship(carModelId, imageId) {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/car-models/" + carModelId + "/has-image/" + imageId)
    return response.data
  }

  //////////////////////////////////////////
  // IMAGES
  //////////////////////////////////////////
  async function ensureValidImageExists() {
    if (!bru.getEnvVar('validImageId')) {
      const nodeList = await getAllImages()
      if (nodeList.length > 0) {
        bru.setEnvVar("validImageId", nodeList[0].id)
      } else {
        const newNode = await createImage()
        bru.setEnvVar("validImageId", newNode.id)
      }
    }
  }

  async function ensureValidSecondImageExists() {
    if (!bru.getEnvVar('validSecondImageId')) {
      const nodeList = await getAllImages()
      if (nodeList.length > 1) {
        bru.setEnvVar("validSecondImageId", nodeList[1].id)
      } else {
        const newNode = await createImage()
        bru.setEnvVar("validSecondImageId", newNode.id)
      }
    }
  }

  async function createImage() {
    const response = await axios.post(bru.getEnvVar('baseUrl') + "/images", {
        "image_provider": "picci",
        "external_id": "123456",
    })
    return response.data
  }

  async function getAllImages() {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/images")
    return response.data
  }

  async function getImageById(id) {
    const response = await axios.get(bru.getEnvVar('baseUrl') + "/images/" + id)
    return response.data
  }
}
