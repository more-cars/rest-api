import express from "express"
import {RacingEventController} from "../controllers/RacingEventController"

const router = express.Router()

router.post('/racing-events', RacingEventController.create)
router.get('/racing-events/:id', RacingEventController.getById)
router.get('/racing-events', RacingEventController.getAll)
router.delete('/racing-events/:id', RacingEventController.delete)
router.post('/racing-events/:racingEventId/belongs-to-racing-series/:racingSeriesId', RacingEventController.createBelongsToRacingSeriesRelation)
router.get('/racing-events/:racingEventId/belongs-to-racing-series', RacingEventController.getBelongsToRacingSeriesRelation)
router.delete('/racing-events/:racingEventId/belongs-to-racing-series/:racingSeriesId', RacingEventController.deleteBelongsToRacingSeriesRelation)
router.post('/racing-events/:racingEventId/is-followed-by-event/:partnerId', RacingEventController.createIsFollowedByEventRelation)
router.get('/racing-events/:racingEventId/is-followed-by-event', RacingEventController.getIsFollowedByEventRelation)
router.delete('/racing-events/:racingEventId/is-followed-by-event/:partnerId', RacingEventController.deleteIsFollowedByEventRelation)
router.post('/racing-events/:racingEventId/follows-event/:partnerId', RacingEventController.createFollowsEventRelation)
router.get('/racing-events/:racingEventId/follows-event', RacingEventController.getFollowsEventRelation)
router.delete('/racing-events/:racingEventId/follows-event/:partnerId', RacingEventController.deleteFollowsEventRelation)
router.post('/racing-events/:racingEventId/took-place-at-race-track/:raceTrackId', RacingEventController.createTookPlaceAtRaceTrackRelation)
router.get('/racing-events/:racingEventId/took-place-at-race-track', RacingEventController.getTookPlaceAtRaceTrackRelation)
router.delete('/racing-events/:racingEventId/took-place-at-race-track/:raceTrackId', RacingEventController.deleteTookPlaceAtRaceTrackRelation)
router.post('/racing-events/:racingEventId/used-the-track-layout/:trackLayoutId', RacingEventController.createUsedTheTrackLayoutRelation)
router.get('/racing-events/:racingEventId/used-the-track-layout', RacingEventController.getUsedTheTrackLayoutRelation)
router.delete('/racing-events/:racingEventId/used-the-track-layout/:trackLayoutId', RacingEventController.deleteUsedTheTrackLayoutRelation)
router.post('/racing-events/:racingEventId/has-racing-session/:racingSessionId', RacingEventController.createHasRacingSessionRelation)
router.get('/racing-events/:racingEventId/has-racing-session', RacingEventController.getAllHasRacingSessionRelations)
router.delete('/racing-events/:racingEventId/has-racing-session/:racingSessionId', RacingEventController.deleteHasRacingSessionRelation)
router.post('/racing-events/:racingEventId/has-image/:imageId', RacingEventController.createHasImageRelation)
router.get('/racing-events/:racingEventId/has-image', RacingEventController.getAllHasImageRelations)
router.delete('/racing-events/:racingEventId/has-image/:imageId', RacingEventController.deleteHasImageRelation)
router.post('/racing-events/:racingEventId/has-prime-image/:imageId', RacingEventController.createHasPrimeImageRelation)
router.get('/racing-events/:racingEventId/has-prime-image', RacingEventController.getHasPrimeImageRelation)
router.delete('/racing-events/:racingEventId/has-prime-image/:imageId', RacingEventController.deleteHasPrimeImageRelation)

export default router
