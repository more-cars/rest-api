{
  "openapi": "3.1.0",
  "info": {
    "title": "More Cars - REST API Specification",
    "description": "OpenAPI specification for the More Cars API",
    "version": "0.24.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local"
    },
    {
      "url": "http://dev.api.more-cars.internal",
      "description": "Local Minikube - DEV"
    },
    {
      "url": "http://testing.api.more-cars.internal",
      "description": "Local Minikube - Testing"
    },
    {
      "url": "http://prod.api.more-cars.internal",
      "description": "Local Minikube - Production"
    },
    {
      "url": "http://testing.api.fast-cars.info",
      "description": "Testing"
    },
    {
      "url": "http://prod.api.fast-cars.info",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Companies",
      "description": "A `Company` is the legal entity behind a Brand (e.g. the company BMW AG owns the brand BMW). A company can have multiple brands (e.g. BMW AG additionally owns the brands Rolls-Royce and MINI)."
    },
    {
      "name": "Brands",
      "description": "Car `Brand`s enables us to distinguish between car models from different car manufacturers. (E.g. BMW, Toyota, Ford.)"
    },
    {
      "name": "Car Models",
      "description": "A `Car Model` represents a group of cars with the same name, from the same brand and the same generation. (E.g. Ferrari Testarossa, VW Golf VII, Ford Fiesta Mk2.)"
    },
    {
      "name": "Race Tracks",
      "description": "The main purpose of a `Race Track` is to hold motorsport races, but can also be used for car testing or driver trainings. It can be a closed racing circuit like Silverstone, a temporary city race track like Monaco, a mountain trail like Pikes Peak or an open track like a Rallye Dakar route."
    },
    {
      "name": "Images",
      "description": "An `Image` can be photo, an illustration, a logo, a screenshot or similar. It illustrates a car or a car-related object. Depending on the context that can be a brand logos, a race track layout, a book cover, etc."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "OpenAPI specification",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all `Companies`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Company` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/CompanyProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Company` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/CompanyProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Company` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create `Company`",
        "responses": {
          "201": {
            "description": "`Company` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Company` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get `Company` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Company` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Company` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Delete `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Company` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Company` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-brand": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all ›has-brand‹ relationships for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-brand‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasBrandCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-brand/{brand-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-brand‹ relationship between the `Company` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-brand‹ between `Company` and `Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasBrandResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-brand‹ between `Company` and `Brand` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-brand‹ relationship between the `Company` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-brand‹ relationship between `Company` and `Brand` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-brand‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-image": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Company` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Company` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Company` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-prime-image": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Company` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Company` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Company` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Returns a list of all `Brand`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Brand` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/BrandProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Brand` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/BrandProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Brand` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create `Brand`",
        "responses": {
          "201": {
            "description": "`Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Brand` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get `Brand` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Brand` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Brand` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Delete `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Brand` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Brand` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/belongs-to-company": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›belongs-to-company‹ relationship for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-company‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandBelongsToCompanyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/belongs-to-company/{company-id}": {
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›belongs-to-company‹ relationship between the `Brand` and the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-company‹ between `Brand` and `Company` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandBelongsToCompanyResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-company‹ between `Brand` and `Company` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›belongs-to-company‹ relationship between the `Brand` and the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-company‹ relationship between `Brand` and `Company` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-company‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all ›has-car-model‹ relationships for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-car-model‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model/{car-model-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-car-model‹ relationship between the `Brand` and `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-car-model‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-car-model‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-car-model‹ relationship between the `Brand` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-car-model‹ between `Brand` and `Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-car-model‹ between `Brand` and `Car Model` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-car-model‹ relationship between the `Brand` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-car-model‹ relationship between `Brand` and `Car Model` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-car-model‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-image‹ relationship between the `Brand` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Brand` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Brand` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Brand` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-prime-image": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Brand` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Brand` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Brand` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Returns a list of all `Car Model`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Car Model` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/CarModelProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Car Model` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/CarModelProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Car Model` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Create `Car Model`",
        "responses": {
          "201": {
            "description": "`Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Car Model` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get `Car Model` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Car Model` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Car Model` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Delete `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Car Model` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Car Model` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›belongs-to-brand‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-brand‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand/{brand-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›belongs-to-brand‹ relationship between the `Car Model` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-brand‹ between `Car Model` and `Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrandResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-brand‹ between `Car Model` and `Brand` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›belongs-to-brand‹ relationship between the `Car Model` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-brand‹ relationship between `Car Model` and `Brand` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-brand‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-successor": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-successor‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-successor‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasSuccessorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-successor/{partner-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-successor‹ relationship between the `Car Model` and another `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the other `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-successor‹ between `Car Model` and other `Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasSuccessorResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-successor‹ between `Car Model` and other `Car Model` already exists."
          },
          "404": {
            "description": "Request failed. One or both `Car Model`s could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-successor‹ relationship between the `Car Model` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-successor‹ relationship between `Car Model` and `Partner` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-successor‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/is-successor-of": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›is-successor-of‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›is-successor-of‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelIsSuccessorOfResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/is-successor-of/{partner-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›is-successor-of‹ relationship between the `Car Model` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›is-successor-of‹ between `Car Model` and `Partner` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelIsSuccessorOfResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›is-successor-of‹ between `Car Model` and `Partner` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Partner` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›is-successor-of‹ relationship between the `Car Model` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›is-successor-of‹ relationship between `Car Model` and `Partner` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›is-successor-of‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-image‹ relationship between the `Car Model` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Car Model` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Car Model` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Car Model` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-prime-image": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-prime-image/{image-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-prime-image‹ relationship between the `Car Model` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-prime-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Car Model` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Car Model` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Car Model` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns a list of all `Image`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Image` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/ImageProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Image` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/ImageProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Image` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Create `Image`",
        "responses": {
          "201": {
            "description": "`Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Image` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get `Image` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Image` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. An `Image` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Delete `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Image` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. An `Image` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all ›belongs-to-node‹ relationships for the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›belongs-to-node‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node/{partner-node-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get the ›belongs-to-node‹ relationship between the `Image` and partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›belongs-to-node‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-node‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed. E.g. when both nodes are identical.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Creates a ›belongs-to-node‹ relationship between the `Image` and the partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-node‹ between `Image` and partner node successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-node‹ between `Image` and partner node already exists."
          },
          "404": {
            "description": "Request failed. `Image` and/or partner node could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request failed. Partner node not compatible with the `Image`.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the ›belongs-to-node‹ relationship between the `Image` and the partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-node‹ relationship between `Image` and partner node was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-node‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node-type": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all ›belongs-to-node-type‹ relationships for the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›belongs-to-node-type‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeTypeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get all `Race Tracks`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Race Track` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/RaceTrackProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Race Track` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/RaceTrackProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Race Track` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Create `Race Track`",
        "responses": {
          "201": {
            "description": "`Race Track` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Race Track` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get `Race Track` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Race Track` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Race Track` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Delete `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Race Track` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Race Track` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-layout": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get all ›has-layout‹ relationships for the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-layout‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasLayoutCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-layout/{track-layout-id}": {
      "post": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Creates a ›has-layout‹ relationship between the `Race Track` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-layout‹ between `Race Track` and `Track Layout` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasLayoutResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-layout‹ between `Race Track` and `Track Layout` already exists."
          },
          "404": {
            "description": "Request failed. `Race Track` and/or `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Deletes the ›has-layout‹ relationship between the `Race Track` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-layout‹ relationship between `Race Track` and `Track Layout` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-layout‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/hosted-racing-event": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get all ›hosted-racing-event‹ relationships for the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›hosted-racing-event‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHostedRacingEventCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/hosted-racing-event/{racing-event-id}": {
      "post": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Creates a ›hosted-racing-event‹ relationship between the `Race Track` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›hosted-racing-event‹ between `Race Track` and `Racing Event` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHostedRacingEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›hosted-racing-event‹ between `Race Track` and `Racing Event` already exists."
          },
          "404": {
            "description": "Request failed. `Race Track` and/or `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Deletes the ›hosted-racing-event‹ relationship between the `Race Track` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›hosted-racing-event‹ relationship between `Race Track` and `Racing Event` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›hosted-racing-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-image": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Race Track` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Race Track` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Race Track` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Race Track` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Race Track` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Race Track` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-prime-image": {
      "get": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/race-tracks/{race-track-id}/has-prime-image/{image-id}": {
      "delete": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Race Track` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Race Track` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Race Tracks"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Race Track` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Race Track` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaceTrackHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Race Track` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Race Track` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get all `Track Layouts`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Track Layout` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/TrackLayoutProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Track Layout` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/TrackLayoutProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Track Layout` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Create `Track Layout`",
        "responses": {
          "201": {
            "description": "`Track Layout` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Track Layout` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get `Track Layout` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Track Layout` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Track Layout` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Delete `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Track Layout` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Track Layout` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/belongs-to-race-track": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get the ›belongs-to-race-track‹ relationship for the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-race-track‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutBelongsToRaceTrackResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/belongs-to-race-track/{race-track-id}": {
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Creates a ›belongs-to-race-track‹ relationship between the `Track Layout` and the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-race-track‹ between `Track Layout` and `Race Track` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutBelongsToRaceTrackResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-race-track‹ between `Track Layout` and `Race Track` already exists."
          },
          "404": {
            "description": "Request failed. `Track Layout` and/or `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Deletes the ›belongs-to-race-track‹ relationship between the `Track Layout` and the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-race-track‹ relationship between `Track Layout` and `Race Track` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-race-track‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/was-used-by-racing-event": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get all ›was-used-by-racing-event‹ relationships for the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›was-used-by-racing-event‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutWasUsedByRacingEventCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/was-used-by-racing-event/{racing-event-id}": {
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Creates a ›was-used-by-racing-event‹ relationship between the `Track Layout` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›was-used-by-racing-event‹ between `Track Layout` and `Racing Event` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutWasUsedByRacingEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›was-used-by-racing-event‹ between `Track Layout` and `Racing Event` already exists."
          },
          "404": {
            "description": "Request failed. `Track Layout` and/or `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Deletes the ›was-used-by-racing-event‹ relationship between the `Track Layout` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›was-used-by-racing-event‹ relationship between `Track Layout` and `Racing Event` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›was-used-by-racing-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-lap-time": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get all ›has-lap-time‹ relationships for the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-lap-time‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasLapTimeCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-lap-time/{lap-time-id}": {
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Creates a ›has-lap-time‹ relationship between the `Track Layout` and the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-lap-time‹ between `Track Layout` and `Lap Time` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasLapTimeResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-lap-time‹ between `Track Layout` and `Lap Time` already exists."
          },
          "404": {
            "description": "Request failed. `Track Layout` and/or `Lap Time` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Deletes the ›has-lap-time‹ relationship between the `Track Layout` and the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-lap-time‹ relationship between `Track Layout` and `Lap Time` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-lap-time‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-image": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Track Layout` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Track Layout` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Track Layout` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Track Layout` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Track Layout` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Track Layout` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-prime-image": {
      "get": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/track-layouts/{track-layout-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Track Layout` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Track Layout` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackLayoutHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Track Layout` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Track Layout` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Track Layouts"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Track Layout` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Track Layout` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series": {
      "get": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Get all `Racing Series`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Racing Series` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/RacingSeriesProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Racing Series` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/RacingSeriesProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Series` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Create `Racing Series`",
        "responses": {
          "201": {
            "description": "`Racing Series` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Racing Series` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}": {
      "get": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Get `Racing Series` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Series` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Racing Series` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Delete `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Racing Series` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Racing Series` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-racing-event": {
      "get": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Get all ›has-racing-event‹ relationships for the `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-racing-event‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasRacingEventCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Series` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-racing-event/{racing-event-id}": {
      "post": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Creates a ›has-racing-event‹ relationship between the `Racing Series` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-racing-event‹ between `Racing Series` and `Racing Event` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasRacingEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-racing-event‹ between `Racing Series` and `Racing Event` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Series` and/or `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Deletes the ›has-racing-event‹ relationship between the `Racing Series` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-racing-event‹ relationship between `Racing Series` and `Racing Event` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-racing-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-image": {
      "get": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Series` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Racing Series` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Racing Series` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Racing Series` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Series` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Racing Series` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Racing Series` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-prime-image": {
      "get": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Series` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-series/{racing-series-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Racing Series` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Racing Series` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSeriesHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Racing Series` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Series` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Series"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Racing Series` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Racing Series` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get all `Racing Events`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Racing Event` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/RacingEventProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Racing Event` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/RacingEventProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Event` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Create `Racing Event`",
        "responses": {
          "201": {
            "description": "`Racing Event` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Racing Event` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get `Racing Event` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Event` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Racing Event` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Delete `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Racing Event` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Racing Event` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/belongs-to-racing-series": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›belongs-to-racing-series‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-racing-series‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventBelongsToRacingSeriesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/belongs-to-racing-series/{racing-series-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›belongs-to-racing-series‹ relationship between the `Racing Event` and the `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-racing-series‹ between `Racing Event` and `Racing Series` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventBelongsToRacingSeriesResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-racing-series‹ between `Racing Event` and `Racing Series` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Racing Series` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›belongs-to-racing-series‹ relationship between the `Racing Event` and the `Racing Series`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-series-id",
            "description": "ID of the `Racing Series`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-racing-series‹ relationship between `Racing Event` and `Racing Series` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-racing-series‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/is-followed-by-event": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›is-followed-by-event‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›is-followed-by-event‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventIsFollowedByEventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/is-followed-by-event/{partner-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›is-followed-by-event‹ relationship between the `Racing Event` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›is-followed-by-event‹ between `Racing Event` and `Partner` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventIsFollowedByEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›is-followed-by-event‹ between `Racing Event` and `Partner` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Partner` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›is-followed-by-event‹ relationship between the `Racing Event` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›is-followed-by-event‹ relationship between `Racing Event` and `Partner` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›is-followed-by-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/follows-event": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›follows-event‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›follows-event‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventFollowsEventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/follows-event/{partner-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›follows-event‹ relationship between the `Racing Event` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›follows-event‹ between `Racing Event` and `Partner` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventFollowsEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›follows-event‹ between `Racing Event` and `Partner` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Partner` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›follows-event‹ relationship between the `Racing Event` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›follows-event‹ relationship between `Racing Event` and `Partner` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›follows-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/took-place-at-race-track": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›took-place-at-race-track‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›took-place-at-race-track‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventTookPlaceAtRaceTrackResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/took-place-at-race-track/{race-track-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›took-place-at-race-track‹ relationship between the `Racing Event` and the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›took-place-at-race-track‹ between `Racing Event` and `Race Track` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventTookPlaceAtRaceTrackResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›took-place-at-race-track‹ between `Racing Event` and `Race Track` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Race Track` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›took-place-at-race-track‹ relationship between the `Racing Event` and the `Race Track`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "race-track-id",
            "description": "ID of the `Race Track`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›took-place-at-race-track‹ relationship between `Racing Event` and `Race Track` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›took-place-at-race-track‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/used-the-track-layout": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›used-the-track-layout‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›used-the-track-layout‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventUsedTheTrackLayoutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/used-the-track-layout/{track-layout-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›used-the-track-layout‹ relationship between the `Racing Event` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›used-the-track-layout‹ between `Racing Event` and `Track Layout` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventUsedTheTrackLayoutResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›used-the-track-layout‹ between `Racing Event` and `Track Layout` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›used-the-track-layout‹ relationship between the `Racing Event` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›used-the-track-layout‹ relationship between `Racing Event` and `Track Layout` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›used-the-track-layout‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-racing-session": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get all ›has-racing-session‹ relationships for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-racing-session‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasRacingSessionCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-racing-session/{racing-session-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›has-racing-session‹ relationship between the `Racing Event` and the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-racing-session‹ between `Racing Event` and `Racing Session` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasRacingSessionResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-racing-session‹ between `Racing Event` and `Racing Session` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›has-racing-session‹ relationship between the `Racing Event` and the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-racing-session‹ relationship between `Racing Event` and `Racing Session` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-racing-session‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-image": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Racing Event` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Racing Event` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Racing Event` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Racing Event` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Racing Event` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-prime-image": {
      "get": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-events/{racing-event-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Racing Event` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Racing Event` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingEventHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Racing Event` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Event` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Events"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Racing Event` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Racing Event` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get all `Racing Sessions`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Racing Session` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/RacingSessionProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Racing Session` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/RacingSessionProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Session` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Create `Racing Session`",
        "responses": {
          "201": {
            "description": "`Racing Session` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Racing Session` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get `Racing Session` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Racing Session` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Racing Session` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Delete `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Racing Session` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Racing Session` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/belongs-to-racing-event": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get the ›belongs-to-racing-event‹ relationship for the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-racing-event‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionBelongsToRacingEventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/belongs-to-racing-event/{racing-event-id}": {
      "post": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Creates a ›belongs-to-racing-event‹ relationship between the `Racing Session` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-racing-event‹ between `Racing Session` and `Racing Event` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionBelongsToRacingEventResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-racing-event‹ between `Racing Session` and `Racing Event` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Session` and/or `Racing Event` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Deletes the ›belongs-to-racing-event‹ relationship between the `Racing Session` and the `Racing Event`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-event-id",
            "description": "ID of the `Racing Event`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-racing-event‹ relationship between `Racing Session` and `Racing Event` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-racing-event‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-session-result": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get all ›has-session-result‹ relationships for the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-session-result‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasSessionResultCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-session-result/{session-result-id}": {
      "post": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Creates a ›has-session-result‹ relationship between the `Racing Session` and the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-session-result‹ between `Racing Session` and `Session Result` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasSessionResultResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-session-result‹ between `Racing Session` and `Session Result` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Session` and/or `Session Result` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Deletes the ›has-session-result‹ relationship between the `Racing Session` and the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-session-result‹ relationship between `Racing Session` and `Session Result` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-session-result‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-image": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Racing Session` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Racing Session` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Racing Session` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Session` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Racing Session` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Racing Session` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-prime-image": {
      "get": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/racing-sessions/{racing-session-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Racing Session` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Racing Session` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RacingSessionHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Racing Session` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Racing Session` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Racing Sessions"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Racing Session` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Racing Session` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results": {
      "get": {
        "tags": [
          "Session Results"
        ],
        "summary": "Get all `Session Results`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Session Result` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/SessionResultProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Session Result` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/SessionResultProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Session Result` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Session Results"
        ],
        "summary": "Create `Session Result`",
        "responses": {
          "201": {
            "description": "`Session Result` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Session Result` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results/{session-result-id}": {
      "get": {
        "tags": [
          "Session Results"
        ],
        "summary": "Get `Session Result` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Session Result` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Session Result` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Session Results"
        ],
        "summary": "Delete `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Session Result` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Session Result` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results/{session-result-id}/belongs-to-racing-session": {
      "get": {
        "tags": [
          "Session Results"
        ],
        "summary": "Get the ›belongs-to-racing-session‹ relationship for the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-racing-session‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultBelongsToRacingSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Session Result` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results/{session-result-id}/belongs-to-racing-session/{racing-session-id}": {
      "post": {
        "tags": [
          "Session Results"
        ],
        "summary": "Creates a ›belongs-to-racing-session‹ relationship between the `Session Result` and the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-racing-session‹ between `Session Result` and `Racing Session` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultBelongsToRacingSessionResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-racing-session‹ between `Session Result` and `Racing Session` already exists."
          },
          "404": {
            "description": "Request failed. `Session Result` and/or `Racing Session` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Session Results"
        ],
        "summary": "Deletes the ›belongs-to-racing-session‹ relationship between the `Session Result` and the `Racing Session`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "racing-session-id",
            "description": "ID of the `Racing Session`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-racing-session‹ relationship between `Session Result` and `Racing Session` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-racing-session‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results/{session-result-id}/has-lap-time": {
      "get": {
        "tags": [
          "Session Results"
        ],
        "summary": "Get all ›has-lap-time‹ relationships for the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-lap-time‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultHasLapTimeCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Session Result` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/session-results/{session-result-id}/has-lap-time/{lap-time-id}": {
      "post": {
        "tags": [
          "Session Results"
        ],
        "summary": "Creates a ›has-lap-time‹ relationship between the `Session Result` and the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-lap-time‹ between `Session Result` and `Lap Time` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResultHasLapTimeResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-lap-time‹ between `Session Result` and `Lap Time` already exists."
          },
          "404": {
            "description": "Request failed. `Session Result` and/or `Lap Time` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Session Results"
        ],
        "summary": "Deletes the ›has-lap-time‹ relationship between the `Session Result` and the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-lap-time‹ relationship between `Session Result` and `Lap Time` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-lap-time‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times": {
      "get": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Get all `Lap Times`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Lap Time` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/LapTimeProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Lap Time` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/LapTimeProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Lap Time` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Create `Lap Time`",
        "responses": {
          "201": {
            "description": "`Lap Time` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Lap Time` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}": {
      "get": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Get `Lap Time` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Lap Time` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Lap Time` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Delete `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Lap Time` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Lap Time` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/belongs-to-session-result": {
      "get": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Get the ›belongs-to-session-result‹ relationship for the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-session-result‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeBelongsToSessionResultResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Lap Time` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/belongs-to-session-result/{session-result-id}": {
      "post": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Creates a ›belongs-to-session-result‹ relationship between the `Lap Time` and the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-session-result‹ between `Lap Time` and `Session Result` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeBelongsToSessionResultResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-session-result‹ between `Lap Time` and `Session Result` already exists."
          },
          "404": {
            "description": "Request failed. `Lap Time` and/or `Session Result` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Deletes the ›belongs-to-session-result‹ relationship between the `Lap Time` and the `Session Result`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "session-result-id",
            "description": "ID of the `Session Result`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-session-result‹ relationship between `Lap Time` and `Session Result` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-session-result‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/achieved-on-track-layout": {
      "get": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Get the ›achieved-on-track-layout‹ relationship for the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›achieved-on-track-layout‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeAchievedOnTrackLayoutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Lap Time` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/achieved-on-track-layout/{track-layout-id}": {
      "post": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Creates a ›achieved-on-track-layout‹ relationship between the `Lap Time` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›achieved-on-track-layout‹ between `Lap Time` and `Track Layout` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeAchievedOnTrackLayoutResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›achieved-on-track-layout‹ between `Lap Time` and `Track Layout` already exists."
          },
          "404": {
            "description": "Request failed. `Lap Time` and/or `Track Layout` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Deletes the ›achieved-on-track-layout‹ relationship between the `Lap Time` and the `Track Layout`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "track-layout-id",
            "description": "ID of the `Track Layout`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›achieved-on-track-layout‹ relationship between `Lap Time` and `Track Layout` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›achieved-on-track-layout‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/has-image": {
      "get": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Lap Time`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Lap Time` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/lap-times/{lap-time-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Lap Time` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Lap Time` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LapTimeHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Lap Time` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Lap Time` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lap Times"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Lap Time` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "lap-time-id",
            "description": "ID of the `Lap Time`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Lap Time` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/relationships/{relationship-id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get relationship by ID",
        "parameters": [
          {
            "in": "path",
            "name": "relationship-id",
            "description": "ID of the `Relationship`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Relationship` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier for the node. Generated by the system. Cannot be changed.",
            "example": 593
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "Brand": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 593
          },
          "name": {
            "type": "string",
            "description": "The name of the brand (e.g. 'Ferrari'). Not to be confused with the company name (e.g. 'Ferrari S.p.A.'). The official spelling is used (e.g. 'MINI' instead of 'Mini').",
            "example": "DKW"
          },
          "full_name": {
            "type": "string",
            "description": "The long form of the brand's name, should it be abbreviated (e.g. 'VW' -> 'Volkswagen').",
            "example": "Dampfkraftwagen"
          },
          "founded": {
            "type": "integer",
            "description": "The year in which the brand was established as a CAR brand. Not necessarily the year the company was founded. 'Peugeot' was founded in 1810, but they are building cars only since 1891.",
            "example": 1916
          },
          "defunct": {
            "type": "integer",
            "description": "The last year the brand name was officially used for a car model.",
            "example": 1966
          },
          "wmi": {
            "type": "string",
            "description": "The WMI (World Manufacturer Identifier) is a unique identifier for a car brand resp. car company. In general it is a three character code as specified in 'ISO 3780'. Some manufacturers have multiple WMIs, some have none at all. Multiple WMIs are separated by comma.",
            "example": null
          },
          "hsn": {
            "type": "string",
            "description": "HSN (Herstellerschlüsselnummer) is the German counterpart of the 'WMI'. It is a four-digit code that identifies the car manufacturer globally. Some manufacturers have multiple HSNs, some have none at all. Multiple HSNs are separated by comma.",
            "example": "0010"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "full_name",
          "founded",
          "defunct",
          "wmi",
          "hsn",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Brand"
          }
        }
      },
      "BrandCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandResponse"
            }
          }
        }
      },
      "BrandBelongsToCompany": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-company"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "company"
              },
              "data": {
                "$ref": "#/components/schemas/Company"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandBelongsToCompanyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandBelongsToCompany"
          }
        }
      },
      "BrandHasCarModel": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-car-model"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasCarModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasCarModel"
          }
        }
      },
      "BrandHasCarModelCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandHasCarModelResponse"
            }
          }
        }
      },
      "BrandHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasImage"
          }
        }
      },
      "BrandHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandHasImageResponse"
            }
          }
        }
      },
      "BrandHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasPrimeImage"
          }
        }
      },
      "CarModelIsSuccessorOf": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "is-successor-of"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelIsSuccessorOfResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelIsSuccessorOf"
          }
        }
      },
      "CarModel": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 588
          },
          "name": {
            "type": "string",
            "description": "The official name of the car model. Does not include the brand name, the internal code or generational information. E.g. instead of 'BMW M3 (E36)' it is just 'M3'",
            "example": "Testarossa"
          },
          "built_from": {
            "type": "integer",
            "description": "The first year of production. (Might differ from the 'model year'.)",
            "example": 1984
          },
          "built_to": {
            "type": "integer",
            "description": "The last year of production. (Might differ from the 'model year'.)",
            "example": 1996
          },
          "generation": {
            "type": "integer",
            "description": "When there exist multiple generations of a car model this number specifies which of those iterations is represented here. E.g. '7' for the 7th-generation of the 'VW Golf'. Multiple iterations can belong to the same generation (e.g. in case of facelifts).",
            "example": 7
          },
          "internal_code": {
            "type": "string",
            "description": "Uniquely identifies the generation (or facelift or variant) of a car model E.g. '997.2' is Porsche's code for the facelift model of the 6th generation of the '911'.",
            "example": "F110"
          },
          "total_production": {
            "type": "integer",
            "description": "The number of cars that have been built in this generation. Includes all variants and special editions.",
            "example": 7177
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "built_from",
          "built_to",
          "generation",
          "internal_code",
          "total_production",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "CarModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModel"
          }
        }
      },
      "CarModelCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarModelResponse"
            }
          }
        }
      },
      "CarModelBelongsToBrand": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-brand"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelBelongsToBrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelBelongsToBrand"
          }
        }
      },
      "CarModelHasSuccessor": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-successor"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasSuccessorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasSuccessor"
          }
        }
      },
      "CarModelHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasImage"
          }
        }
      },
      "CarModelHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarModelHasImageResponse"
            }
          }
        }
      },
      "CarModelHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasPrimeImage"
          }
        }
      },
      "Image": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "readOnly": true,
            "example": 21186
          },
          "image_provider": {
            "type": "string",
            "description": "The platform that is hosting the image. Supported options are: 'flickr' and 'wikimedia'.",
            "example": "flickr"
          },
          "external_id": {
            "type": "string",
            "description": "The official identifier of the image. Flickr uses numbers (e.g. '43644091312'). Wikimedia uses a URL-friendly version of the image name (e.g. 'File:BMW_Z4_Concept.jpg').",
            "example": "36039295304"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The title of the image.",
            "example": "1958 Lincoln Premiere"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short description of the photo or image.",
            "example": null
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "description": "The creator, photographer or rights holder of the image.",
            "example": "More Cars"
          },
          "license": {
            "type": "string",
            "readOnly": true,
            "description": "The license under which the image was released. More Cars accepts images when they have a 'Creative Commons' license that allows commercial usage: CC0, CC BY, CC BY-SA, CC BY-ND.",
            "example": "CC BY 2.0"
          },
          "tags": {
            "type": "string",
            "readOnly": true,
            "description": "A comma-separated list of keywords which describe the picture.",
            "example": "Oldtimer, Lincoln, pink"
          },
          "source": {
            "type": "string",
            "readOnly": true,
            "description": "The 'official address' of this photo, where licensing and additional information can be found.",
            "format": "url",
            "example": "https://www.flickr.com/photos/more-cars/36039295304/"
          },
          "image_url_original": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in its original size.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_xxl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XXL size. Optional.",
            "format": "url",
            "example": null
          },
          "image_url_xl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XL size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_bdf7d4b0ec_o.jpg"
          },
          "image_url_l": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in L size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_b.jpg"
          },
          "image_url_m": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in M size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_s": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in S size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_n.jpg"
          },
          "image_url_xs": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XS size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_t.jpg"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2018-12-01T16:13:15Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2020-11-21T19:21:02Z"
          }
        }
      },
      "ImageProperties": {
        "type": "string",
        "enum": [
          "id",
          "image_provider",
          "external_id",
          "name",
          "description",
          "creator",
          "license",
          "tags",
          "source",
          "image_url_original",
          "image_url_xxl",
          "image_url_xl",
          "image_url_l",
          "image_url_m",
          "image_url_s",
          "image_url_xs",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "ImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "ImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            }
          }
        }
      },
      "ImageBelongsToNode": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-node"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Company"
                  },
                  {
                    "$ref": "#/components/schemas/Brand"
                  },
                  {
                    "$ref": "#/components/schemas/CarModel"
                  }
                ]
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "ImageBelongsToNodeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageBelongsToNode"
          }
        }
      },
      "ImageBelongsToNodeCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
            }
          }
        }
      },
      "ImageBelongsToNodeType": {
        "type": "object",
        "required": [],
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          },
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          },
          "car_models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          }
        }
      },
      "ImageBelongsToNodeTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageBelongsToNodeType"
          }
        }
      },
      "Company": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "readOnly": true,
            "example": "1234"
          },
          "name": {
            "type": "string",
            "description": "The official name of the car company, incl. the legal entity type (AG, SE, GmbH, N.V., s.p.a., Ltd).",
            "example": "BMW AG"
          },
          "founded": {
            "type": "number",
            "description": "The year the company was founded.",
            "example": "1916"
          },
          "defunct": {
            "type": "number",
            "description": "The year the company was shut down.",
            "example": ""
          },
          "headquarters_location": {
            "type": "string",
            "description": "The city, town or region in which the company has its (de facto) headquarters.",
            "example": "Munich"
          },
          "legal_headquarters_location": {
            "type": "string",
            "description": "The city, town or region where the company has its official headquarters. As an example, `Ferrari` is an Italian company, based in `Maranello`, but on paper they are a Dutch company, located in `Amsterdam`.",
            "example": "Munich"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "founded",
          "defunct",
          "headquarters_location",
          "legal_headquarters_location",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "CompanyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Company"
          }
        }
      },
      "CompanyCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyResponse"
            }
          }
        }
      },
      "CompanyHasBrand": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-brand"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasBrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasBrand"
          }
        }
      },
      "CompanyHasBrandCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyHasBrandResponse"
            }
          }
        }
      },
      "CompanyHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasImage"
          }
        }
      },
      "CompanyHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyHasImageResponse"
            }
          }
        }
      },
      "CompanyHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasPrimeImage"
          }
        }
      },
      "RaceTrack": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "name": {
            "type": "string",
            "description": "The official name of the race track. Might contain the owner or sponsor name, like `Red Bull Ring` or `WeatherTech Raceway Laguna Seca`",
            "example": "Lausitzring"
          },
          "opened": {
            "type": "number",
            "description": "The year in which the race track was opened to the public.",
            "example": "2000"
          },
          "closed": {
            "type": "number",
            "description": "The year in which the race track was shut down.",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "Is it a permanent race track or a temporary one?",
            "example": "permanent race track"
          },
          "location": {
            "type": "string",
            "description": "The city or region where this track is located.",
            "example": "Klettwitz"
          },
          "geo_position": {
            "type": "string",
            "description": "The geographic position of the race track, provided as coordinates with latitude and longitude information.",
            "example": "51°32'0\"N 13°55'10\"E"
          }
        }
      },
      "RaceTrackResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RaceTrack"
          }
        }
      },
      "RaceTrackCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaceTrackResponse"
            }
          }
        }
      },
      "RaceTrackHasLayout": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-layout"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "track-layout"
              },
              "data": {
                "$ref": "#/components/schemas/TrackLayout"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RaceTrackHasLayoutResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RaceTrackHasLayout"
          }
        }
      },
      "RaceTrackHasLayoutCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaceTrackHasLayoutResponse"
            }
          }
        }
      },
      "RaceTrackHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RaceTrackHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RaceTrackHasImage"
          }
        }
      },
      "RaceTrackHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaceTrackHasImageResponse"
            }
          }
        }
      },
      "RaceTrackHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RaceTrackHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RaceTrackHasPrimeImage"
          }
        }
      },
      "RaceTrackHostedRacingEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "hosted-racing-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RaceTrackHostedRacingEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RaceTrackHostedRacingEvent"
          }
        }
      },
      "RaceTrackHostedRacingEventCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaceTrackHostedRacingEventResponse"
            }
          }
        }
      },
      "RaceTrackProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "opened",
          "closed",
          "type",
          "location",
          "geo_position"
        ],
        "default": "id"
      },
      "TrackLayout": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "name": {
            "type": "string",
            "description": "",
            "example": "GP Circuit"
          },
          "year_from": {
            "type": "number",
            "description": "",
            "example": "1967"
          },
          "year_to": {
            "type": "number",
            "description": "",
            "example": "1999"
          },
          "length": {
            "type": "number",
            "description": "",
            "example": "7.004"
          },
          "length_unit": {
            "type": "string",
            "description": "",
            "example": "km"
          },
          "direction": {
            "type": "string",
            "description": "",
            "example": "clockwise"
          },
          "elevation_change": {
            "type": "number",
            "description": "",
            "example": "71"
          },
          "elevation_change_unit": {
            "type": "string",
            "description": "",
            "example": "m"
          },
          "surface": {
            "type": "string",
            "description": "",
            "example": "asphalt"
          }
        }
      },
      "TrackLayoutResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayout"
          }
        }
      },
      "TrackLayoutCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackLayoutResponse"
            }
          }
        }
      },
      "TrackLayoutBelongsToRaceTrack": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-race-track"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "race-track"
              },
              "data": {
                "$ref": "#/components/schemas/RaceTrack"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "TrackLayoutBelongsToRaceTrackResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayoutBelongsToRaceTrack"
          }
        }
      },
      "TrackLayoutWasUsedByRacingEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "was-used-by-racing-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "TrackLayoutWasUsedByRacingEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayoutWasUsedByRacingEvent"
          }
        }
      },
      "TrackLayoutWasUsedByRacingEventCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackLayoutWasUsedByRacingEventResponse"
            }
          }
        }
      },
      "TrackLayoutHasLapTime": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-lap-time"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "lap-time"
              },
              "data": {
                "$ref": "#/components/schemas/LapTime"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "TrackLayoutHasLapTimeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayoutHasLapTime"
          }
        }
      },
      "TrackLayoutHasLapTimeCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackLayoutHasLapTimeResponse"
            }
          }
        }
      },
      "TrackLayoutHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "TrackLayoutHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayoutHasImage"
          }
        }
      },
      "TrackLayoutHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackLayoutHasImageResponse"
            }
          }
        }
      },
      "TrackLayoutHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "TrackLayoutHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TrackLayoutHasPrimeImage"
          }
        }
      },
      "TrackLayoutProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "year_from",
          "year_to",
          "length",
          "length_unit",
          "direction",
          "elevation_change",
          "elevation_change_unit",
          "surface"
        ],
        "default": "id"
      },
      "RacingSeries": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "name": {
            "type": "string",
            "description": "",
            "example": "Formula 1"
          },
          "short_name": {
            "type": "string",
            "description": "",
            "example": "F1"
          },
          "founded": {
            "type": "number",
            "description": "",
            "example": "1950"
          },
          "defunct": {
            "type": "number",
            "description": "",
            "example": ""
          },
          "organized_by": {
            "type": "string",
            "description": "",
            "example": "FIA"
          },
          "vehicle_type": {
            "type": "string",
            "description": "",
            "example": "formula racing cars"
          }
        }
      },
      "RacingSeriesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSeries"
          }
        }
      },
      "RacingSeriesCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSeriesResponse"
            }
          }
        }
      },
      "RacingSeriesHasRacingEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-racing-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSeriesHasRacingEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSeriesHasRacingEvent"
          }
        }
      },
      "RacingSeriesHasRacingEventCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSeriesHasRacingEventResponse"
            }
          }
        }
      },
      "RacingSeriesHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSeriesHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSeriesHasImage"
          }
        }
      },
      "RacingSeriesHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSeriesHasImageResponse"
            }
          }
        }
      },
      "RacingSeriesHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSeriesHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSeriesHasPrimeImage"
          }
        }
      },
      "RacingSeriesProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "short_name",
          "founded",
          "defunct",
          "organized_by",
          "vehicle_type"
        ],
        "default": "id"
      },
      "RacingEvent": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "name": {
            "type": "string",
            "description": "",
            "example": "GP Monaco 2025"
          },
          "round": {
            "type": "number",
            "description": "",
            "example": "8"
          },
          "date_from": {
            "type": "string",
            "description": "",
            "example": "2025-05-25"
          },
          "date_to": {
            "type": "string",
            "description": "",
            "example": "2025-05-27"
          }
        }
      },
      "RacingEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEvent"
          }
        }
      },
      "RacingEventCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingEventResponse"
            }
          }
        }
      },
      "RacingEventBelongsToRacingSeries": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-racing-series"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-series"
              },
              "data": {
                "$ref": "#/components/schemas/RacingSeries"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventBelongsToRacingSeriesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventBelongsToRacingSeries"
          }
        }
      },
      "RacingEventIsFollowedByEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "is-followed-by-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventIsFollowedByEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventIsFollowedByEvent"
          }
        }
      },
      "RacingEventFollowsEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "follows-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventFollowsEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventFollowsEvent"
          }
        }
      },
      "RacingEventTookPlaceAtRaceTrack": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "took-place-at-race-track"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "race-track"
              },
              "data": {
                "$ref": "#/components/schemas/RaceTrack"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventTookPlaceAtRaceTrackResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventTookPlaceAtRaceTrack"
          }
        }
      },
      "RacingEventUsedTheTrackLayout": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "used-the-track-layout"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "track-layout"
              },
              "data": {
                "$ref": "#/components/schemas/TrackLayout"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventUsedTheTrackLayoutResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventUsedTheTrackLayout"
          }
        }
      },
      "RacingEventHasRacingSession": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-racing-session"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-session"
              },
              "data": {
                "$ref": "#/components/schemas/RacingSession"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventHasRacingSessionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventHasRacingSession"
          }
        }
      },
      "RacingEventHasRacingSessionCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingEventHasRacingSessionResponse"
            }
          }
        }
      },
      "RacingEventHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventHasImage"
          }
        }
      },
      "RacingEventHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingEventHasImageResponse"
            }
          }
        }
      },
      "RacingEventHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingEventHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingEventHasPrimeImage"
          }
        }
      },
      "RacingEventProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "round",
          "date_from",
          "date_to"
        ],
        "default": "id"
      },
      "RacingSession": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "name": {
            "type": "string",
            "description": "",
            "example": "Grand Prix"
          },
          "start_date": {
            "type": "string",
            "description": "",
            "example": "2025-05-20"
          },
          "start_time": {
            "type": "string",
            "description": "",
            "example": "14:00"
          },
          "duration": {
            "type": "number",
            "description": "",
            "example": "120"
          },
          "duration_unit": {
            "type": "string",
            "description": "",
            "example": "min"
          },
          "distance": {
            "type": "number",
            "description": "",
            "example": "58"
          },
          "distance_unit": {
            "type": "string",
            "description": "",
            "example": "laps"
          }
        }
      },
      "RacingSessionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSession"
          }
        }
      },
      "RacingSessionCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSessionResponse"
            }
          }
        }
      },
      "RacingSessionBelongsToRacingEvent": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-racing-event"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-event"
              },
              "data": {
                "$ref": "#/components/schemas/RacingEvent"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSessionBelongsToRacingEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSessionBelongsToRacingEvent"
          }
        }
      },
      "RacingSessionHasSessionResult": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-session-result"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "session-result"
              },
              "data": {
                "$ref": "#/components/schemas/SessionResult"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSessionHasSessionResultResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSessionHasSessionResult"
          }
        }
      },
      "RacingSessionHasSessionResultCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSessionHasSessionResultResponse"
            }
          }
        }
      },
      "RacingSessionHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSessionHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSessionHasImage"
          }
        }
      },
      "RacingSessionHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RacingSessionHasImageResponse"
            }
          }
        }
      },
      "RacingSessionHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RacingSessionHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RacingSessionHasPrimeImage"
          }
        }
      },
      "RacingSessionProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "start_date",
          "start_time",
          "duration",
          "duration_unit",
          "distance",
          "distance_unit"
        ],
        "default": "id"
      },
      "SessionResult": {
        "type": "object",
        "required": [
          "position",
          "driver_name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "position": {
            "type": "number",
            "description": "",
            "example": "1"
          },
          "race_number": {
            "type": "string",
            "description": "",
            "example": "44"
          },
          "driver_name": {
            "type": "string",
            "description": "",
            "example": "Lewis Hamilton"
          },
          "team_name": {
            "type": "string",
            "description": "",
            "example": "Mercedes"
          },
          "race_time": {
            "type": "string",
            "description": "",
            "example": "PT1H23M45.678S"
          },
          "laps": {
            "type": "number",
            "description": "",
            "example": "51"
          },
          "status": {
            "type": "string",
            "description": "",
            "example": "finished"
          },
          "points": {
            "type": "number",
            "description": "",
            "example": "25"
          }
        }
      },
      "SessionResultResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SessionResult"
          }
        }
      },
      "SessionResultCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionResultResponse"
            }
          }
        }
      },
      "SessionResultBelongsToRacingSession": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-racing-session"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "racing-session"
              },
              "data": {
                "$ref": "#/components/schemas/RacingSession"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "SessionResultBelongsToRacingSessionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SessionResultBelongsToRacingSession"
          }
        }
      },
      "SessionResultHasLapTime": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-lap-time"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "lap-time"
              },
              "data": {
                "$ref": "#/components/schemas/LapTime"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "SessionResultHasLapTimeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SessionResultHasLapTime"
          }
        }
      },
      "SessionResultHasLapTimeCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionResultHasLapTimeResponse"
            }
          }
        }
      },
      "SessionResultProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "position",
          "race_number",
          "driver_name",
          "team_name",
          "race_time",
          "laps",
          "status",
          "points"
        ],
        "default": "id"
      },
      "LapTime": {
        "type": "object",
        "required": [
          "time",
          "driver_name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": "1234"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "time": {
            "type": "string",
            "description": "",
            "example": "PT1M33.294S"
          },
          "driver_name": {
            "type": "string",
            "description": "",
            "example": "Klaus Ludwig"
          },
          "date": {
            "type": "string",
            "description": "",
            "example": "1996-08-03"
          }
        }
      },
      "LapTimeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LapTime"
          }
        }
      },
      "LapTimeCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LapTimeResponse"
            }
          }
        }
      },
      "LapTimeBelongsToSessionResult": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-session-result"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "session-result"
              },
              "data": {
                "$ref": "#/components/schemas/SessionResult"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "LapTimeBelongsToSessionResultResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LapTimeBelongsToSessionResult"
          }
        }
      },
      "LapTimeAchievedOnTrackLayout": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "achieved-on-track-layout"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "track-layout"
              },
              "data": {
                "$ref": "#/components/schemas/TrackLayout"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "LapTimeAchievedOnTrackLayoutResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LapTimeAchievedOnTrackLayout"
          }
        }
      },
      "LapTimeHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "LapTimeHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LapTimeHasImage"
          }
        }
      },
      "LapTimeHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LapTimeHasImageResponse"
            }
          }
        }
      },
      "LapTimeProperties": {
        "type": "string",
        "enum": [
          "id",
          "created_at",
          "updated_at",
          "time",
          "driver_name",
          "date"
        ],
        "default": "id"
      },
      "Relationship": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-car-model"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/Node"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "RelationshipResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Relationship"
          }
        }
      }
    },
    "parameters": {
      "Page": {
        "in": "query",
        "name": "page",
        "description": "Defines, which slice of the whole collection should be returned. Each full page contains 100 nodes. The last page contains the remaining nodes. Pages that are out of range return an empty list.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "SortDirection": {
        "in": "query",
        "name": "sort_direction",
        "description": "Allows to switch the order direction of the returned node collection between ascending and descending.",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "FilterValue": {
        "in": "query",
        "name": "filter_value",
        "description": "Specifies the value against which the filter property is compared against."
      },
      "FilterOperator": {
        "in": "query",
        "name": "filter_operator",
        "description": "Specifies how the property values should be compared against the filter value.",
        "schema": {
          "type": "string",
          "enum": [
            "eq",
            "neq",
            "lt",
            "gt",
            "lte",
            "gte"
          ],
          "default": "eq"
        }
      }
    }
  }
}