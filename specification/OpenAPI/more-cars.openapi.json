{
  "openapi": "3.1.0",
  "info": {
    "title": "More Cars - REST API Specification",
    "description": "OpenAPI specification for the More Cars API",
    "version": "0.21.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local"
    },
    {
      "url": "http://dev.api.more-cars.internal",
      "description": "Local Minikube - DEV"
    },
    {
      "url": "http://testing.api.more-cars.internal",
      "description": "Local Minikube - Testing"
    },
    {
      "url": "http://prod.api.more-cars.internal",
      "description": "Local Minikube - Production"
    },
    {
      "url": "http://testing.api.fast-cars.info",
      "description": "Testing"
    },
    {
      "url": "http://prod.api.fast-cars.info",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Companies",
      "description": "A `Company` is the legal entity behind a Brand (e.g. the company BMW AG owns the brand BMW). A company can have multiple brands (e.g. BMW AG additionally owns the brands Rolls-Royce and MINI)."
    },
    {
      "name": "Brands",
      "description": "Car `Brand`s enables us to distinguish between car models from different car manufacturers. (E.g. BMW, Toyota, Ford.)"
    },
    {
      "name": "Car Models",
      "description": "A `Car Model` represents a group of cars with the same name, from the same brand and the same generation. (E.g. Ferrari Testarossa, VW Golf VII, Ford Fiesta Mk2.)"
    },
    {
      "name": "Images",
      "description": "An `Image` can be photo, an illustration, a logo, a screenshot or similar. It illustrates a car or a car-related object. Depending on the context that can be a brand logos, a race track layout, a book cover, etc."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "OpenAPI specification",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all `Companies`",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Company` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/CompanyProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Company` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/CompanyProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Company` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create `Company`",
        "responses": {
          "201": {
            "description": "`Company` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Company` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get `Company` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Company` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Company` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Delete `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Company` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Company` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-brand": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all ›has-brand‹ relationships for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-brand‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasBrandCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-brand/{brand-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-brand‹ relationship between the `Company` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-brand‹ between `Company` and `Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasBrandResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-brand‹ between `Company` and `Brand` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-brand‹ relationship between the `Company` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-brand‹ relationship between `Company` and `Brand` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-brand‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-image": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-image/{image-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Company` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Company` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Company` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-prime-image": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{company-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Company` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Company` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Company` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Company` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Company` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Returns a list of all `Brand`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Brand` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/BrandProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Brand` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/BrandProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Brand` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create `Brand`",
        "responses": {
          "201": {
            "description": "`Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Brand` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get `Brand` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Brand` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Brand` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Delete `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Brand` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Brand` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/belongs-to-company": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›belongs-to-company‹ relationship for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-company‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandBelongsToCompanyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/belongs-to-company/{company-id}": {
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›belongs-to-company‹ relationship between the `Brand` and the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-company‹ between `Brand` and `Company` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandBelongsToCompanyResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-company‹ between `Brand` and `Company` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Company` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›belongs-to-company‹ relationship between the `Brand` and the `Company`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "company-id",
            "description": "ID of the `Company`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-company‹ relationship between `Brand` and `Company` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-company‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all ›has-car-model‹ relationships for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-car-model‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model/{car-model-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-car-model‹ relationship between the `Brand` and `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-car-model‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-car-model‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-car-model‹ relationship between the `Brand` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-car-model‹ between `Brand` and `Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModelResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-car-model‹ between `Brand` and `Car Model` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-car-model‹ relationship between the `Brand` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-car-model‹ relationship between `Brand` and `Car Model` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-car-model‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-image‹ relationship between the `Brand` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Brand` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Brand` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Brand` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-prime-image": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-prime-image/{image-id}": {
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Brand` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Brand` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Brand` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Brand` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Brand` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Returns a list of all `Car Model`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Car Model` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/CarModelProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Car Model` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/CarModelProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Car Model` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Create `Car Model`",
        "responses": {
          "201": {
            "description": "`Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Car Model` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get `Car Model` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Car Model` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. A `Car Model` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Delete `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Car Model` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. A `Car Model` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›belongs-to-brand‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›belongs-to-brand‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand/{brand-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›belongs-to-brand‹ relationship between the `Car Model` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-brand‹ between `Car Model` and `Brand` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrandResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-brand‹ between `Car Model` and `Brand` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Brand` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›belongs-to-brand‹ relationship between the `Car Model` and the `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-brand‹ relationship between `Car Model` and `Brand` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-brand‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-successor": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-successor‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-successor‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasSuccessorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-successor/{partner-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-successor‹ relationship between the `Car Model` and another `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the other `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-successor‹ between `Car Model` and other `Car Model` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasSuccessorResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-successor‹ between `Car Model` and other `Car Model` already exists."
          },
          "404": {
            "description": "Request failed. One or both `Car Model`s could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-successor‹ relationship between the `Car Model` and the `Partner`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-successor‹ relationship between `Car Model` and `Partner` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-successor‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/is-successor-of/{partner-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›is-successor-of‹ relationship between the `Car Model` and the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-id",
            "description": "ID of the `Partner`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›is-successor-of‹ between `Car Model` and `Partner` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelIsSuccessorOfResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›is-successor-of‹ between `Car Model` and `Partner` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Partner` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get all ›has-image‹ relationships for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›has-image‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-image‹ relationship between the `Car Model` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-image‹ between `Car Model` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-image‹ between `Car Model` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-image‹ relationship between `Car Model` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-prime-image": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-prime-image‹ relationship for the `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ›has-prime-image‹ relationship was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Car Model` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-prime-image/{image-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get the ›has-prime-image‹ relationship between the `Car Model` and `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›has-prime-image‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Creates a ›has-prime-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›has-prime-image‹ between `Car Model` and `Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasPrimeImageResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›has-prime-image‹ between `Car Model` and `Image` already exists."
          },
          "404": {
            "description": "Request failed. `Car Model` and/or `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Deletes the ›has-prime-image‹ relationship between the `Car Model` and the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›has-prime-image‹ relationship between `Car Model` and `Image` was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›has-prime-image‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns a list of all `Image`s",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "in": "query",
            "name": "sort_by_property",
            "description": "Returns the `Image` collection, ordered by the specified property.",
            "schema": {
              "$ref": "#/components/schemas/ImageProperties"
            }
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "in": "query",
            "name": "filter_by_property",
            "description": "Specifies by which node property the `Image` collection should be filtered.",
            "schema": {
              "$ref": "#/components/schemas/ImageProperties"
            }
          },
          {
            "$ref": "#/components/parameters/FilterValue"
          },
          {
            "$ref": "#/components/parameters/FilterOperator"
          }
        ],
        "responses": {
          "200": {
            "description": "`Image` collection successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request failed. One or multiple of the provided collection parameters ('page', 'sort_by_property', 'sort_direction', 'filter_by_property', 'filter_value', 'filter_operator') are invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Create `Image`",
        "responses": {
          "201": {
            "description": "`Image` successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "`Image` could not be created. The provided data was invalid or malformed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get `Image` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`Image` successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. An `Image` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Delete `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Image` successfully deleted."
          },
          "404": {
            "description": "Deletion request failed. An `Image` with the provided ID could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all ›belongs-to-node‹ relationships for the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›belongs-to-node‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node/{partner-node-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get the ›belongs-to-node‹ relationship between the `Image` and partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific ›belongs-to-node‹ relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-node‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed. E.g. when both nodes are identical.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Creates a ›belongs-to-node‹ relationship between the `Image` and the partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship ›belongs-to-node‹ between `Image` and partner node successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
                }
              }
            }
          },
          "304": {
            "description": "The relationship ›belongs-to-node‹ between `Image` and partner node already exists."
          },
          "404": {
            "description": "Request failed. `Image` and/or partner node could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request failed. Partner node not compatible with the `Image`.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the ›belongs-to-node‹ relationship between the `Image` and the partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleting ›belongs-to-node‹ relationship between `Image` and partner node was successful."
          },
          "404": {
            "description": "Request failed. Either the nodes don't exist or there exists no ›belongs-to-node‹ relationship between them.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node-type": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all ›belongs-to-node-type‹ relationships for the `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of ›belongs-to-node-type‹ relationships was successfully loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeTypeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Request failed. The `Image` could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Brand": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 593
          },
          "name": {
            "type": "string",
            "description": "The name of the brand (e.g. 'Ferrari'). Not to be confused with the company name (e.g. 'Ferrari S.p.A.'). The official spelling is used (e.g. 'MINI' instead of 'Mini').",
            "example": "DKW"
          },
          "full_name": {
            "type": "string",
            "description": "The long form of the brand's name, should it be abbreviated (e.g. 'VW' -> 'Volkswagen').",
            "example": "Dampfkraftwagen"
          },
          "founded": {
            "type": "integer",
            "description": "The year in which the brand was established as a CAR brand. Not necessarily the year the company was founded. 'Peugeot' was founded in 1810, but they are building cars only since 1891.",
            "example": 1916
          },
          "defunct": {
            "type": "integer",
            "description": "The last year the brand name was officially used for a car model.",
            "example": 1966
          },
          "wmi": {
            "type": "string",
            "description": "The WMI (World Manufacturer Identifier) is a unique identifier for a car brand resp. car company. In general it is a three character code as specified in 'ISO 3780'. Some manufacturers have multiple WMIs, some have none at all. Multiple WMIs are separated by comma.",
            "example": null
          },
          "hsn": {
            "type": "string",
            "description": "HSN (Herstellerschlüsselnummer) is the German counterpart of the 'WMI'. It is a four-digit code that identifies the car manufacturer globally. Some manufacturers have multiple HSNs, some have none at all. Multiple HSNs are separated by comma.",
            "example": "0010"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "full_name",
          "founded",
          "defunct",
          "wmi",
          "hsn",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "BrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Brand"
          }
        }
      },
      "BrandCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandResponse"
            }
          }
        }
      },
      "BrandBelongsToCompany": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-company"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "company"
              },
              "data": {
                "$ref": "#/components/schemas/Company"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandBelongsToCompanyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandBelongsToCompany"
          }
        }
      },
      "BrandHasCarModel": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-car-model"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasCarModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasCarModel"
          }
        }
      },
      "BrandHasCarModelCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandHasCarModelResponse"
            }
          }
        }
      },
      "BrandHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasImage"
          }
        }
      },
      "BrandHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandHasImageResponse"
            }
          }
        }
      },
      "BrandHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandHasPrimeImage"
          }
        }
      },
      "CarModelIsSuccessorOf": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "is-successor-of"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelIsSuccessorOfResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelIsSuccessorOf"
          }
        }
      },
      "CarModel": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 588
          },
          "name": {
            "type": "string",
            "description": "The official name of the car model. Does not include the brand name, the internal code or generational information. E.g. instead of 'BMW M3 (E36)' it is just 'M3'",
            "example": "Testarossa"
          },
          "built_from": {
            "type": "integer",
            "description": "The first year of production. (Might differ from the 'model year'.)",
            "example": 1984
          },
          "built_to": {
            "type": "integer",
            "description": "The last year of production. (Might differ from the 'model year'.)",
            "example": 1996
          },
          "generation": {
            "type": "integer",
            "description": "When there exist multiple generations of a car model this number specifies which of those iterations is represented here. E.g. '7' for the 7th-generation of the 'VW Golf'. Multiple iterations can belong to the same generation (e.g. in case of facelifts).",
            "example": 7
          },
          "internal_code": {
            "type": "string",
            "description": "Uniquely identifies the generation (or facelift or variant) of a car model E.g. '997.2' is Porsche's code for the facelift model of the 6th generation of the '911'.",
            "example": "F110"
          },
          "total_production": {
            "type": "integer",
            "description": "The number of cars that have been built in this generation. Includes all variants and special editions.",
            "example": 7177
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "built_from",
          "built_to",
          "generation",
          "internal_code",
          "total_production",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "CarModelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModel"
          }
        }
      },
      "CarModelCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarModelResponse"
            }
          }
        }
      },
      "CarModelBelongsToBrand": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-brand"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelBelongsToBrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelBelongsToBrand"
          }
        }
      },
      "CarModelHasSuccessor": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-successor"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "car-model"
              },
              "data": {
                "$ref": "#/components/schemas/CarModel"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasSuccessorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasSuccessor"
          }
        }
      },
      "CarModelHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasImage"
          }
        }
      },
      "CarModelHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarModelHasImageResponse"
            }
          }
        }
      },
      "CarModelHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CarModelHasPrimeImage"
          }
        }
      },
      "Image": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "readOnly": true,
            "example": 21186
          },
          "image_provider": {
            "type": "string",
            "description": "The platform that is hosting the image. Supported options are: 'flickr' and 'wikimedia'.",
            "example": "flickr"
          },
          "external_id": {
            "type": "string",
            "description": "The official identifier of the image. Flickr uses numbers (e.g. '43644091312'). Wikimedia uses a URL-friendly version of the image name (e.g. 'File:BMW_Z4_Concept.jpg').",
            "example": "36039295304"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The title of the image.",
            "example": "1958 Lincoln Premiere"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short description of the photo or image.",
            "example": null
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "description": "The creator, photographer or rights holder of the image.",
            "example": "More Cars"
          },
          "license": {
            "type": "string",
            "readOnly": true,
            "description": "The license under which the image was released. More Cars accepts images when they have a 'Creative Commons' license that allows commercial usage: CC0, CC BY, CC BY-SA, CC BY-ND.",
            "example": "CC BY 2.0"
          },
          "tags": {
            "type": "string",
            "readOnly": true,
            "description": "A comma-separated list of keywords which describe the picture.",
            "example": "Oldtimer, Lincoln, pink"
          },
          "source": {
            "type": "string",
            "readOnly": true,
            "description": "The 'official address' of this photo, where licensing and additional information can be found.",
            "format": "url",
            "example": "https://www.flickr.com/photos/more-cars/36039295304/"
          },
          "image_url_original": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in its original size.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_xxl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XXL size. Optional.",
            "format": "url",
            "example": null
          },
          "image_url_xl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XL size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_bdf7d4b0ec_o.jpg"
          },
          "image_url_l": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in L size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_b.jpg"
          },
          "image_url_m": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in M size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_s": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in S size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_n.jpg"
          },
          "image_url_xs": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XS size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_t.jpg"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2018-12-01T16:13:15Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2020-11-21T19:21:02Z"
          }
        }
      },
      "ImageProperties": {
        "type": "string",
        "enum": [
          "id",
          "image_provider",
          "external_id",
          "name",
          "description",
          "creator",
          "license",
          "tags",
          "source",
          "image_url_original",
          "image_url_xxl",
          "image_url_xl",
          "image_url_l",
          "image_url_m",
          "image_url_s",
          "image_url_xs",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "ImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "ImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            }
          }
        }
      },
      "ImageBelongsToNode": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-node"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Company"
                  },
                  {
                    "$ref": "#/components/schemas/Brand"
                  },
                  {
                    "$ref": "#/components/schemas/CarModel"
                  }
                ]
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "ImageBelongsToNodeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageBelongsToNode"
          }
        }
      },
      "ImageBelongsToNodeCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNodeResponse"
            }
          }
        }
      },
      "ImageBelongsToNodeType": {
        "type": "object",
        "required": [],
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          },
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          },
          "car_models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          }
        }
      },
      "ImageBelongsToNodeTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageBelongsToNodeType"
          }
        }
      },
      "Company": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "readOnly": true,
            "example": "1234"
          },
          "name": {
            "type": "string",
            "description": "The official name of the car company, incl. the legal entity type (AG, SE, GmbH, N.V., s.p.a., Ltd).",
            "example": "BMW AG"
          },
          "founded": {
            "type": "number",
            "description": "The year the company was founded.",
            "example": "1916"
          },
          "defunct": {
            "type": "number",
            "description": "The year the company was shut down.",
            "example": ""
          },
          "headquarters_location": {
            "type": "string",
            "description": "The city, town or region in which the company has its (de facto) headquarters.",
            "example": "Munich"
          },
          "legal_headquarters_location": {
            "type": "string",
            "description": "The city, town or region where the company has its official headquarters. As an example, `Ferrari` is an Italian company, based in `Maranello`, but on paper they are a Dutch company, located in `Amsterdam`.",
            "example": "Munich"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyProperties": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "founded",
          "defunct",
          "headquarters_location",
          "legal_headquarters_location",
          "created_at",
          "updated_at"
        ],
        "default": "id"
      },
      "CompanyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Company"
          }
        }
      },
      "CompanyCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyResponse"
            }
          }
        }
      },
      "CompanyHasBrand": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-brand"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "brand"
              },
              "data": {
                "$ref": "#/components/schemas/Brand"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasBrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasBrand"
          }
        }
      },
      "CompanyHasBrandCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyHasBrandResponse"
            }
          }
        }
      },
      "CompanyHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasImage"
          }
        }
      },
      "CompanyHasImageCollectionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyHasImageResponse"
            }
          }
        }
      },
      "CompanyHasPrimeImage": {
        "type": "object",
        "required": [],
        "properties": {
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "12345678"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-prime-image"
          },
          "relationship_partner": {
            "type": "object",
            "properties": {
              "node_type": {
                "type": "string",
                "example": "image"
              },
              "data": {
                "$ref": "#/components/schemas/Image"
              }
            }
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this relationship was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CompanyHasPrimeImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CompanyHasPrimeImage"
          }
        }
      }
    },
    "parameters": {
      "Page": {
        "in": "query",
        "name": "page",
        "description": "Defines, which slice of the whole collection should be returned. Each full page contains 100 nodes. The last page contains the remaining nodes. Pages that are out of range return an empty list.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "SortDirection": {
        "in": "query",
        "name": "sort_direction",
        "description": "Allows to switch the order direction of the returned node collection between ascending and descending.",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "FilterValue": {
        "in": "query",
        "name": "filter_value",
        "description": "Specifies the value against which the filter property is compared against."
      },
      "FilterOperator": {
        "in": "query",
        "name": "filter_operator",
        "description": "Specifies how the property values should be compared against the filter value.",
        "schema": {
          "type": "string",
          "enum": [
            "eq",
            "neq",
            "lt",
            "gt",
            "lte",
            "gte"
          ],
          "default": "eq"
        }
      }
    }
  }
}