{
  "openapi": "3.1.0",
  "info": {
    "title": "More Cars - REST API Specification",
    "description": "OpenAPI specification for the More Cars API",
    "version": "0.15.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local"
    },
    {
      "url": "http://api.more-cars.dev.internal",
      "description": "Local Minikube - DEV"
    },
    {
      "url": "http://api.more-cars.prod.internal",
      "description": "Local Minikube - PROD"
    },
    {
      "url": "http://api.fast-cars.info",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Brands",
      "description": "Car `Brand`s enables us to distinguish between car models from different car manufacturers. (E.g. BMW, Toyota, Ford.)"
    },
    {
      "name": "Car Models",
      "description": "A `Car Model` represents a group of cars with the same name, from the same brand and the same generation. (E.g. Ferrari Testarossa, VW Golf VII, Ford Fiesta Mk2.)"
    },
    {
      "name": "Images",
      "description": "An `Image` can be photo, an illustration, a logo, a screenshot or similar. It illustrates a car or a car-related object. Depending on the context that can be a brand logos, a race track layout, a book cover, etc."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "OpenAPI specification",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get `Brand` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested `Brand` was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "404": {
            "description": "No `Brand` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Delete `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Brand` was deleted."
          },
          "404": {
            "description": "No `Brand` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Returns a list of all `Brand`s",
        "responses": {
          "200": {
            "description": "A list of all `Brand`s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Brand"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create `Brand`",
        "responses": {
          "201": {
            "description": "`Brand` created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all `Brand-has-Car-Model` relationships",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationships were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandHasCarModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No `Brand` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-car-model/{car-model-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get `Brand-has-Car-Model` relationship",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModel"
                }
              }
            }
          },
          "404": {
            "description": "`Brand`, `Car Model` or relationship not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Connects the given `Brand` to the given `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Brand` and `Car Model` successfully connected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasCarModel"
                }
              }
            }
          },
          "404": {
            "description": "`Brand` or `Car Model` not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request cannot be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all `Brand-has-Image` relationships",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationships were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandHasImage"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No `Brand` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get `Brand-has-Image` relationship",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImage"
                }
              }
            }
          },
          "404": {
            "description": "No `Brand` or `Image` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Connects the given `Image` to the given `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Brand` and `Image` successfully connected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandHasImage"
                }
              }
            }
          },
          "404": {
            "description": "`Brand` or `Image` not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request cannot be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get `Car Model` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested `Car Model` was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModel"
                }
              }
            }
          },
          "404": {
            "description": "No `Car Model` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Car Models"
        ],
        "summary": "Delete `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Car Model` was deleted."
          },
          "404": {
            "description": "No `Car Model` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Returns a list of all `Car Model`s",
        "responses": {
          "200": {
            "description": "A list of all `Car Model`s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CarModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Create `Car Model`",
        "responses": {
          "201": {
            "description": "`Car Model` created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModel"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get `Car-Model-belongs-to-Brand` relationship",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrand"
                }
              }
            }
          },
          "404": {
            "description": "No `Car Model` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/belongs-to-brand/{brand-id}": {
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Connects the given `Car Model` to the given `Brand`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "brand-id",
            "description": "ID of the `Brand`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Car Model` and `Brand` successfully connected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelBelongsToBrand"
                }
              }
            }
          },
          "404": {
            "description": "`Car Model` or `Brand` not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request cannot be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get all `Car-Model-has-Image` relationships",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationships were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CarModelHasImage"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No `Car Model` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/car-models/{car-model-id}/has-image/{image-id}": {
      "get": {
        "tags": [
          "Car Models"
        ],
        "summary": "Get `Car-Model-has-Image` relationship",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImage"
                }
              }
            }
          },
          "404": {
            "description": "No `Car Model` or `Image` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car Models"
        ],
        "summary": "Connects the given `Image` to the given `Car Model`",
        "parameters": [
          {
            "in": "path",
            "name": "car-model-id",
            "description": "ID of the `Car Model`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Car Model` and `Image` successfully connected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarModelHasImage"
                }
              }
            }
          },
          "404": {
            "description": "`Car Model` or `Image` not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request cannot be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get `Image` by ID",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested `Image` was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "404": {
            "description": "No `Image` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Delete `Image`",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "`Image` was deleted."
          },
          "404": {
            "description": "No `Image` with the provided ID found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns a list of all `Image`s",
        "responses": {
          "200": {
            "description": "A list of all `Image`s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Create `Image`",
        "responses": {
          "201": {
            "description": "`Image` created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node/{partner-node-id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get the relationship between `Image` and partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationship was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNode"
                }
              }
            }
          },
          "404": {
            "description": "`Image` or partner node not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed. E.g. when both nodes are identical.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Connects the given `Image` to the given partner node",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "partner-node-id",
            "description": "ID of the partner node",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Image` and partner node successfully connected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNode"
                }
              }
            }
          },
          "404": {
            "description": "`Image` or partner node not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request cannot be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all `Image-belongs-to-Node` relationships",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationships were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageBelongsToNode"
                  }
                }
              }
            }
          },
          "404": {
            "description": "`Image` node not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image-id}/belongs-to-node-type": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get all `Image-belongs-to-Node-type` relationships",
        "parameters": [
          {
            "in": "path",
            "name": "image-id",
            "description": "ID of the `Image`",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requested relationships were found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBelongsToNodeType"
                }
              }
            }
          },
          "404": {
            "description": "`Image` node not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Brand": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 593
          },
          "name": {
            "type": "string",
            "description": "The name of the brand (e.g. 'Ferrari'). Not to be confused with the company name (e.g. 'Ferrari S.p.A.'). The official spelling is used (e.g. 'MINI' instead of 'Mini').",
            "example": "DKW"
          },
          "full_name": {
            "type": "string",
            "description": "The long form of the brand's name, should it be abbreviated (e.g. 'VW' -> 'Volkswagen').",
            "example": "Dampfkraftwagen"
          },
          "founded": {
            "type": "integer",
            "description": "The year in which the brand was established as a CAR brand. Not necessarily the year the company was founded. 'Peugeot' was founded in 1810, but they are building cars only since 1891.",
            "example": 1916
          },
          "defunct": {
            "type": "integer",
            "description": "The last year the brand name was officially used for a car model.",
            "example": 1966
          },
          "wmi": {
            "type": "string",
            "description": "The WMI (World Manufacturer Identifier) is a unique identifier for a car brand resp. car company. In general it is a three character code as specified in 'ISO 3780'. Some manufacturers have multiple WMIs, some have none at all. Multiple WMIs are separated by comma.",
            "example": null
          },
          "hsn": {
            "type": "string",
            "description": "HSN (Herstellerschlüsselnummer) is the German counterpart of the 'WMI'. It is a four-digit code that identifies the car manufacturer globally. Some manufacturers have multiple HSNs, some have none at all. Multiple HSNs are separated by comma.",
            "example": "0010"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "readOnly": true,
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasCarModel": {
        "type": "object",
        "required": [],
        "properties": {
          "brand_id": {
            "type": "integer",
            "readOnly": true,
            "example": "3"
          },
          "car_model_id": {
            "type": "integer",
            "readOnly": true,
            "example": "25"
          },
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-car-model"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "BrandHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "brand_id": {
            "type": "integer",
            "readOnly": true,
            "example": "1"
          },
          "image_id": {
            "type": "integer",
            "readOnly": true,
            "example": "2125"
          },
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModel": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "example": 588
          },
          "name": {
            "type": "string",
            "description": "The official name of the car model. Does not include the brand name, the internal code or generational information. E.g. instead of 'BMW M3 (E36)' it is just 'M3'",
            "example": "Testarossa"
          },
          "built_from": {
            "type": "integer",
            "description": "The first year of production. (Might differ from the 'model year'.)",
            "example": 1984
          },
          "built_to": {
            "type": "integer",
            "description": "The last year of production. (Might differ from the 'model year'.)",
            "example": 1996
          },
          "generation": {
            "type": "integer",
            "description": "When there exist multiple generations of a car model this number specifies which of those iterations is represented here. E.g. '7' for the 7th-generation of the 'VW Golf'. Multiple iterations can belong to the same generation (e.g. in case of facelifts).",
            "example": 7
          },
          "internal_code": {
            "type": "string",
            "description": "Uniquely identifies the generation (or facelift or variant) of a car model E.g. '997.2' is Porsche's code for the facelift model of the 6th generation of the '911'.",
            "example": "F110"
          },
          "total_production": {
            "type": "integer",
            "description": "The number of cars that have been built in this generation. Includes all variants and special editions.",
            "example": 7177
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelBelongsToBrand": {
        "type": "object",
        "required": [],
        "properties": {
          "car_model_id": {
            "type": "integer",
            "readOnly": true,
            "example": "25"
          },
          "brand_id": {
            "type": "integer",
            "readOnly": true,
            "example": "3"
          },
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-brand"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "CarModelHasImage": {
        "type": "object",
        "required": [],
        "properties": {
          "car_model_id": {
            "type": "integer",
            "readOnly": true,
            "example": "1100"
          },
          "image_id": {
            "type": "integer",
            "readOnly": true,
            "example": "4069"
          },
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "has-image"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "Image": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier which is generated by the system. Cannot be changed.",
            "readOnly": true,
            "example": 21186
          },
          "image_provider": {
            "type": "string",
            "description": "The platform that is hosting the image. Supported options are: 'flickr' and 'wikimedia'.",
            "example": "flickr"
          },
          "external_id": {
            "type": "string",
            "description": "The official identifier of the image. Flickr uses numbers (e.g. '43644091312'). Wikimedia uses a URL-friendly version of the image name (e.g. 'File:BMW_Z4_Concept.jpg').",
            "example": "36039295304"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The title of the image.",
            "example": "1958 Lincoln Premiere"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short description of the photo or image.",
            "example": null
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "description": "The creator, photographer or rights holder of the image.",
            "example": "More Cars"
          },
          "license": {
            "type": "string",
            "readOnly": true,
            "description": "The license under which the image was released. More Cars accepts images when they have a 'Creative Commons' license that allows commercial usage: CC0, CC BY, CC BY-SA, CC BY-ND.",
            "example": "CC BY 2.0"
          },
          "tags": {
            "type": "string",
            "readOnly": true,
            "description": "A comma-separated list of keywords which describe the picture.",
            "example": "Oldtimer, Lincoln, pink"
          },
          "source": {
            "type": "string",
            "readOnly": true,
            "description": "The 'official address' of this photo, where licensing and additional information can be found.",
            "format": "url",
            "example": "https://www.flickr.com/photos/more-cars/36039295304/"
          },
          "image_url_original": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in its original size.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_xxl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XXL size. Optional.",
            "format": "url",
            "example": null
          },
          "image_url_xl": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XL size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_bdf7d4b0ec_o.jpg"
          },
          "image_url_l": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in L size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_b.jpg"
          },
          "image_url_m": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in M size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_z.jpg"
          },
          "image_url_s": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in S size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_n.jpg"
          },
          "image_url_xs": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the image in XS size. Optional.",
            "format": "url",
            "example": "https://live.staticflickr.com/4389/36039295304_c98f0f3d86_t.jpg"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2018-12-01T16:13:15Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2020-11-21T19:21:02Z"
          }
        }
      },
      "ImageBelongsToNode": {
        "type": "object",
        "required": [],
        "properties": {
          "image_id": {
            "type": "integer",
            "readOnly": true,
            "example": "607533"
          },
          "partner_node_id": {
            "type": "integer",
            "readOnly": true,
            "example": "607400"
          },
          "relationship_id": {
            "type": "integer",
            "readOnly": true,
            "example": "123456"
          },
          "relationship_name": {
            "type": "string",
            "readOnly": true,
            "example": "belongs-to-node"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was created. Generated by the system. Cannot be changed.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "description": "Timestamp for when this node was last modified. Generated by the system.",
            "format": "date-time",
            "example": "2025-05-14T11:05:07.793Z"
          }
        }
      },
      "ImageBelongsToNodeType": {
        "type": "object",
        "required": [],
        "properties": {
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          },
          "car_models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageBelongsToNode"
            }
          }
        }
      }
    }
  }
}