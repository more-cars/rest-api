{
  "id": "MCA-20",
  "parent_id": "MCA-71",
  "title": "Create BRAND-has-CAR MODEL Relationship",
  "user_story": "As an API contributor\\\nI want to be able to connect CAR MODELs to a BRAND\\\nSo I can create car families\n",
  "description": "# **Response**\n\n**Happy path**\n\n* positive HTTP status code (201)\n* a simple JSON confirming that both entities have been connected:\n  * `brand_id`: integer\n  * `car_model_id`: integer\n  * `relationship_id`: integer\n  * `relationship_name`: string\n\n**Unhappy path**\n\n* negative HTTP status code (404)\n* a plain text response stating the problem\n\n# **Acceptance Criteria**\n\n**Behavior (Business Logic)**\n\n* the relationship is not created in error case\n* an error message when the provided data was not valid\n  * 404 when `brand` or `car model` were not found\n* the relationship is successfully created when provided with valid data\n* the user can trigger the creation of the same relationship over and over again\n  * the result is always the same (idempotency)\n  * the relation may be recreated in the database, but the `More Cars ID` needs to stay the same\n* each brand can have multiple car models\n  * when a new brand is assigned the original relationship will be removed\n\n# **Quality Gates**\n\n* Unit+Integration tests (Jest) are extended (100% coverage)\n* Behavior tests (Cucumber) are added (100% coverage)\n* OpenAPI spec is extended\n  * schema is still valid\n* Bruno collection is extended\n* Performance tests are extended\n  * existing tests are still green\n\n# **NOT in scope for this iteration**\n\n* auth / security\n* proper JSON structure according to the JSON:API\n* returning the relationships in other places\n* deleting the relationship\n",
  "api_verb": "POST",
  "api_path": "/brands/<brand-id>/has-car-model/<car-model-id>",
  "response_options": [
    "201",
    "404"
  ],
  "release_versions": [
    "0.7.0"
  ],
  "created_at": "2025-05-01T09:52:47.354+0200",
  "updated_at": "2025-08-23T18:44:23.853+0200"
}
